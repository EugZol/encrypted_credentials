#!/usr/bin/env ruby

require 'optionparser'
require 'tempfile'
require 'pathname'
require 'shellwords'
require 'securerandom'

require_relative '../lib/encrypted_credentials/coder'

options = {}
options[:in] = '/dev/stdin'

parser =
  OptionParser.new do |x|
    x.banner = "Usage: EDITOR=nano edit_credentials [options]"
    x.separator ""
    x.separator "Only -i is required."
    x.separator ""
    x.separator "If neither -k nor -f is provided key filename will be guessed from input filename (master.key or <environment>.key)."
    x.separator "If guessed key file is not found, it will be created with a random key."
    x.separator ""

    x.on('-i', '--in FILENAME', 'Encrypted credentials file (omit to use STDIN/STDOUT)') { |o| options[:in] = o }
    x.on('-k', '--key KEY_HEX', 'Key (hex representation)') { |o| options[:key] = o }
    x.on('-f', '--keyfile KEY_FILE', 'Key file (with hex representation of the key)') { |o| options[:key] = File.read(o) }
  end

parser.parse!

if options[:in] == '/dev/stdin'
  options[:in] = '/dev/stdin'
  options[:out] = '/dev/stdout'
else
  options[:out] = options[:in]
end

editor = ENV['EDITOR'] || 'nano'

data_bin = File.read(options[:in]) if File.exist?(options[:in])

key_hex = options[:key]
key_hex ||= begin
  credentials_path = File.dirname(options[:in])

  # credentials.yml.enc -> master.key
  master_key = credentials_path + '/master.key'
  # development.yml.enc -> development.key
  environment_key = credentials_path + '/' + File.basename(options[:in]).split('.').first + '.key'

  if File.exist?(master_key)
    File.read(master_key)
  elsif File.exist?(environment_key)
    File.read(environment_key)
  else
    puts "Could not find key file (checked: #{master_key}, #{environment_key})"
    key_file =
      if File.basename(options[:in]).split('.').first == 'credentials'
        master_key
      else
        environment_key
      end
    puts "Creating #{key_file}"
    key = SecureRandom.hex(16)
    File.write(key_file, key)
    key
  end
end

begin
  tmp_file = "#{Process.pid}.#{File.basename(options[:in]).chomp('.enc')}"
  tmp_path = Pathname.new(File.join(Dir.tmpdir, tmp_file))

  decrypted_data = EncryptedCredentials::Coder.decrypt(data_bin, key_hex) if data_bin
  tmp_path.binwrite decrypted_data

  begin
    system("#{editor} #{Shellwords.escape(tmp_path)}")
  rescue Interrupt
    puts "Interrupted. Nothing was changed."
    exit
  end

  updated_decrypted_data = tmp_path.binread

  if updated_decrypted_data == decrypted_data
    puts "No changes were made, credentials file was not updated"
  else
    File.write(options[:out], EncryptedCredentials::Coder.encrypt(updated_decrypted_data, key_hex))
  end
ensure
  FileUtils.rm(tmp_path) if tmp_path&.exist?
end
